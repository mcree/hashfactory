package org.hashfactory.model.dao;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.zip.GZIPOutputStream;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;

import org.codehaus.staxmate.SMOutputFactory;
import org.codehaus.staxmate.out.SMOutputDocument;
import org.codehaus.staxmate.out.SMOutputElement;
import org.hashfactory.model.HashEntry;

public class HashFileWriter {

	private static DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ") {
		public Date parse(String source, ParsePosition pos) {
			return super.parse(source.replaceFirst(":(?=[0-9]{2}$)", ""), pos);
		}
	};
	
	public static DateFormat getDateFormat() {
		return df;
	}

	private SMOutputElement fileSet;
	private SMOutputDocument doc;
	private Writer out;

	public HashFileWriter(String fileName) throws XMLStreamException,
			IOException {
		File file = new File(fileName);
		if (file.exists()) {
			throw new IOException(fileName
					+ ": file exists - refusing overwrite");
		}
		XMLOutputFactory factory = XMLOutputFactory.newInstance();
		SMOutputFactory outf = new SMOutputFactory(factory);
		out = new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(file, false)), "UTF-8");
		doc = outf.createOutputDocument(out);
		doc.setIndentation("\n  ", 1, 1);

		doc.addComment("Generated by HashFactory 0.1-SNAPSHOT");
		
		writeHeader();
	}

	private void writeHeader() throws XMLStreamException {
		fileSet = doc.addElement("fileSet");
		fileSet.addAttribute("version", "1.0");
		fileSet.addAttribute("timestamp", df.format(new Date()));
	}

	public void write(HashEntry entry) throws XMLStreamException {
		SMOutputElement e = fileSet.addElement("entry");
		e.addAttribute("hash", entry.getHash());
		e.addAttribute("timestamp", df.format(entry.getTimestamp()));
		e.addAttribute("mime", entry.getMime());
		e.addAttribute("size", Long.toString(entry.getSize()));
		for(String val : entry.getFileSets()) {
			SMOutputElement se = e.addElement("fileSet");
			se.addAttribute("id", val);
		}
		for(String val : entry.getNames()) {
			SMOutputElement se = e.addElement("name");
			se.addAttribute("value", val);
		}
		for(String val : entry.getPaths()) {
			SMOutputElement se = e.addElement("path");
			se.addAttribute("value", val);
		}
	}

	private void writeFooter() throws XMLStreamException {
	}

	public void close() throws XMLStreamException, IOException {
		writeFooter();
		doc.closeRootAndWriter();
		out.close();
	}

}
